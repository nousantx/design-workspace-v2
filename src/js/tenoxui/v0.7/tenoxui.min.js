/*!
 * TenoxUI CSS Framework v0.7.0 [ https://tenoxui.web.app ]
 * copyright (c) 2024 nousantx
 * licensed under MIT [ https://github.com/nousantx/tenoxui/blob/main/LICENSE ]
 */
const property={p:"padding",pt:"paddingTop",pb:"paddingBottom",pr:"paddingRight",pl:"paddingLeft",ph:["paddingLeft","paddingRight"],pv:["paddingTop","paddingBottom"],m:"margin",mt:"marginTop",mb:"marginBottom",mr:"marginRight",ml:"marginLeft",mv:["marginTop","marginBottom"],mh:["marginLeft","marginRight"],fs:"fontSize",fw:"fontWeight",lh:"lineHeight",ls:"letterSpacing",ta:"text-align",tc:"color",ts:"textStyle",td:"textDecoration",ti:"textIndent",tn:"textReansform",ws:"wordSpacing",family:"fontFamily","text-style":"fontStyle","white-space":"whiteSpace",position:"position",post:"position",z:"zIndex",zi:"zIndex",t:"top",top:"top",b:"bottom",bottom:"bottom",r:"right",right:"right",l:"left",left:"left",display:"display",w:"width","w-mx":"maxWidth","w-mn":"minWidth",h:"height","h-mx":"maxHeight","h-mn":"minHeight",col:"columns",bg:"background","bg-attach":"backgroundAttachment","bg-origin":"backgroundOrigin","bg-size":"backgroundSize","bg-clip":"backgroundClip","bg-repeat":"backgroundRepeat","bg-loc":"backgroundPosition","bg-loc-x":"backgroundPositionX","bg-loc-y":"backgroundPositionY","bg-blend":"backgroundBlendMode","bg-image":"backgroundImage",fx:"flex",flex:"flex","flex-auto":"flex","initial-flex":"flex","flex-parent":["justifyContent","alignItems"],fd:"flexDirection","fx-wrap":"flexWrap","item-order":"order",order:"order","fx-basis":"flexBasis","fx-grow":"flexGrow","fx-shrink":"flexShrink","grid-row":"gridTemplateRows","grid-col":"gridTemplateColumns","auto-grid-row":"gridTemplateRows","auto-grid-col":"gridTemplateColumns","grid-item-row":"gridRow","grid-item-col":"gridColumn","grid-row-end":"gridRowEnd","grid-row-start":"gridRowStart","grid-col-end":"gridColumnEnd","grid-col-start":"gridColumnStart","grid-area":"gridArea","item-place":"placeItems","content-place":"placeContent",gap:"gap","grid-gap":"gridGap","grid-row-gap":"gridRowGap","grid-col-gap":"gridColumnGap","row-gap":"rowGap","col-gap":"columnGap",ac:"alignContent",ai:"align-items",as:"alignSelf",jc:"justify-content",ji:"justifyItems",js:"justifySelf","backdrop-blur":"backdropFilter",filter:"filter",blur:"filter",brightness:"filter",contrast:"filter",grayscale:"filter","hue-rotate":"filter",saturate:"filter",sepia:"filter",opa:"opacity","back-blur":"backdropFilter","back-brightness":"backdropFilter","back-contrast":"backdropFilter","back-grayscale":"backdropFilter","back-saturate":"backdropFilter","back-sepia":"backdropFilter",br:"borderRadius",bw:"borderWidth","bw-left":"borderLeftWidth","bw-right":"borderRightWidth","bw-top":"borderTopWidth","bw-bottom":"borderBottomWidth",bs:"borderStyle","radius-tl":"borderTopLeftRadius","radius-tr":"borderTopRightRadius","radius-bl":"borderBottomLeftRadius","radius-br":"borderBottomRightRadius","radius-top":["borderTopLeftRadius","borderTopRightRadius"],"radius-bottom":["borderBottomLeftRadius","borderBottomRightRadius"],"radius-left":["borderTopLeftRadius","borderBottomLeftRadius"],"radius-right":["borderTopRightRadius","borderBottomRightRadius"],ol:"outline","ol-width":"outlineWidth","ol-style":"outlineStyle","ol-offset":"outlineOffset",curs:"cursor",cursor:"cursor",over:"overflow",overY:"overflowY",overX:"overflowX",float:"float",ratio:"aspectRatio",transition:"transition","tr-time":"transitionDuration","tr-prop":"transitionProperty","tr-timing":"transitionTimingFunction","tr-delay":"transitionDelay",transform:"transform","move-x":"transform","move-y":"transform","move-z":"transform",matrix:"transform","matrix-3d":"transform",rt:"transform","rt-3d":"transform",translate:"transform",scale:"transform","scale-3d":"transform","scale-x":"transform","scale-y":"transform","scale-z":"transform",skew:"transform","skew-x":"transform","skew-y":"transform","box-sizing":"boxSizing",isolation:"isolation",visibility:"visibility",box:["width","height"]};let Classes,AllClasses;Classes=Object.keys(property).map((e=>`[class*="${e}-"]`));AllClasses=document.querySelectorAll(Classes.join(", "));class newProp{constructor(e,t){if(typeof e!=="string"||!Array.isArray(t)){console.warn("Invalid arguments for newProp. Please provide a string for name and an array for values.");return}this[e]=t;Classes.push(`[class*="${e}-"]`);AllClasses=document.querySelectorAll(Classes.join(", "))}tryAdd(){if(!this||Object.keys(this).length===0){console.warn("Invalid newProp instance:",this);return}Object.assign(property,this)}}function addType(e,t){if(typeof e!=="string"){throw new Error("Types must be a string")}if(!Array.isArray(t)&&typeof t!=="string"){throw new Error("Property must be a string or array")}if(typeof t==="string"){t=[t]}new newProp(e,t).tryAdd()}class makeTenoxUI{constructor(e){this.element=e;this.styles=property}applyStyle(e,t,r){let s=this.styles[e];if(s){if(!Array.isArray(s)){s=[s]}s.forEach((s=>{if(s==="filter"){const a=this.element.style[s];this.element.style[s]=a?`${a} ${e}(${t}${r})`:`${e}(${t}${r})`}else if(e==="flex-auto"){this.element.style[s]=`1 1 ${t}${r}`}else if(e==="initial-flex"){this.element.style[s]=`0 1 ${t}${r}`}else if(s==="gridRow"||s==="gridColumn"||s==="gridRowStart"||s==="gridColumnStart"||s==="gridRowEnd"||s==="gridColumnEnd"){this.element.style[s]=`span ${t}${r}`}else if(e==="grid-row"||e==="grid-col"){this.element.style[s]=`repeat(${t}${r}, 1fr)`}else if(e==="auto-grid-row"||e==="auto-grid-col"){this.element.style[s]=`repeat(auto-fit, minmax(${t}${r}, 1fr))`}else if(e==="bg-image"){this.element.style[s]=`url(${t})`}else if(s==="backdropFilter"){const a=this.element.style[s];switch(e){case"back-blur":this.element.style[s]=`${a||""} blur(${t}${r})`;break;case"back-sepia":this.element.style[s]=`${a||""} sepia(${t}${r})`;break;case"back-saturate":this.element.style[s]=`${a||""} saturate(${t}${r})`;break;case"back-grayscale":this.element.style[s]=`${a||""} grayscale(${t}${r})`;break;case"back-brightness":this.element.style[s]=`${a||""} brightness(${t}${r})`;break;case"back-invert":this.element.style[s]=`${a||""} invert(${t}${r})`;break;case"back-contrast":this.element.style[s]=`${a||""} contrast(${t}${r})`;break;default:break}}else if(s==="transform"){const a=this.element.style[s];switch(e){case"translate":this.element.style[s]=`${a||""} translate(${t}${r})`;break;case"rt":this.element.style[s]=`${a||""} rotate(${t}${r})`;break;case"rotate":this.element.style[s]=`${a||""} rotate(${t}${r})`;break;case"move-x":this.element.style[s]=`${a||""} translateX(${t}${r})`;break;case"move-y":this.element.style[s]=`${a||""} translateY(${t}${r})`;break;case"move-z":this.element.style[s]=`${a||""} translateZ(${t}${r})`;break;case"matrix":this.element.style[s]=`${a||""} matrix(${t}${r})`;break;case"matrix-3d":this.element.style[s]=`${a||""} matrix3d(${t}${r})`;break;case"scale-3d":this.element.style[s]=`${a||""} scale3d(${t}${r})`;break;case"scale":this.element.style[s]=`${a||""} scale(${t}${r})`;break;case"scale-x":this.element.style[s]=`${a||""} scaleX(${t}${r})`;break;case"scale-y":this.element.style[s]=`${a||""} scaleY(${t}${r})`;break;case"scale-z":this.element.style[s]=`${a||""} scaleZ(${t}${r})`;break;case"skew-x":this.element.style[s]=`${a||""} skewX(${t}${r})`;break;case"skew-y":this.element.style[s]=`${a||""} skewY(${t}${r})`;break;case"skew-z":this.element.style[s]=`${a||""} skewZ(${t}${r})`;break;default:break}}else if(t.startsWith("[")&&t.endsWith("]")){const e=t.slice(1,-1);this.element.style[s]=`var(--${e})`}else{this.element.style[s]=`${t}${r}`}}))}}applyStyles(e){const t=e.match(/([a-zA-Z]+(?:-[a-zA-Z]+)*)-(-?(?:\d+(\.\d+)?)|(?:[a-zA-Z]+(?:-[a-zA-Z]+)*(?:-[a-zA-Z]+)*)|(?:#[0-9a-fA-F]+)|(?:\[[^\]]+\]))([a-zA-Z%]*)/);if(t){const e=t[1];const r=t[2];const s=t[4];this.applyStyle(e,r,s)}}applyMultiStyles(e){const t=e.split(/\s+/);t.forEach((e=>{this.applyStyles(e)}))}}function makeStyle(e,t){const r=(e,t)=>{const r=new makeTenoxUI(e);r.applyMultiStyles(t)};if(typeof t==="string"){const s=document.querySelectorAll(e);s.forEach((e=>r(e,t)))}else if(typeof t==="object"){Object.entries(t).forEach((([e,t])=>{const s=document.querySelectorAll(e);s.forEach((e=>r(e,t)))}))}else{console.warn(`Invalid styles format for "${e}". Make sure you provide style correctly`)}}function defineProps(e){Object.entries(e).forEach((([e,t])=>{if(typeof t!=="string"&&!Array.isArray(t)){console.warn(`Invalid property values for "${e}". Make sure you provide values as an array.`)}const r=typeof t==="string"?[t]:t;const s=new newProp(e,r);s.tryAdd()}))}function makeStyles(e){const t={};const r=(e,t)=>{const r=new makeTenoxUI(e);if(typeof t==="string"){r.applyMultiStyles(t)}else{for(const[e,s]of Object.entries(t)){r.applyStyle(e,s,"")}}};const s=(e,t)=>{Object.entries(t).forEach((([t,a])=>{const o=document.querySelectorAll(`${e} ${t}`);if(typeof a==="object"&&!Array.isArray(a)){s(`${e} ${t}`,a)}else{o.forEach((e=>{r(e,a)}))}}))};Object.entries(e).forEach((([e,a])=>{if(typeof a==="object"&&!Array.isArray(a)){s(e,a)}else{const t=document.querySelectorAll(e);t.forEach((e=>{r(e,a)}))}t[e]=a}));return t}function moreColor(){const e=(e,t,r,s)=>{const a=e.className.match(t);if(a){e.style[r]=s(a)}};const t=document.querySelectorAll('[class*="bg-"], [class*="tc-"], [class*="border-"]');const r={bg:"background",tc:"color",border:"borderColor"};const s={rgb:e=>`rgb(${e.slice(1,4).join(",")})`,rgba:e=>`rgba(${e.slice(1,5).join(",")})`,hex:e=>`#${e[1]}`};t.forEach((t=>{for(const a in r){for(const o in s){const i=new RegExp(`${a}-${o}\\(([^)]+)\\)`);e(t,i,r[a],s[o])}const o=new RegExp(`${a}-([0-9a-fA-F]{3,6})`);e(t,o,r[a],s["hex"])}}))}function applyHover(e,t,r,s=""){const a=document.querySelectorAll(e);a.forEach((e=>{const a=new makeTenoxUI(e);a.applyMultiStyles(s);e.addEventListener("mouseenter",(()=>{a.applyMultiStyles(r)}));e.addEventListener("mouseleave",(()=>{a.applyMultiStyles(t)}))}))}function applyHovers(e){Object.entries(e).forEach((([e,[t,r,s=""]])=>{const a=document.querySelectorAll(e);a.forEach((e=>{const a=new makeTenoxUI(e);a.applyMultiStyles(s);e.addEventListener("mouseenter",(()=>{a.applyMultiStyles(r)}));e.addEventListener("mouseleave",(()=>{a.applyMultiStyles(t)}))}))}))}function tenoxui(){Classes=Object.keys(property).map((e=>`[class*="${e}-"]`));AllClasses=document.querySelectorAll(Classes.join(", "));AllClasses.forEach((e=>{const t=e.classList;const r=new makeTenoxUI(e);t.forEach((e=>{r.applyStyles(e)}))}))}moreColor();tenoxui();